---
- hosts: all
  become: yes
  tasks:
    - name: Create directory for storing our website (/webapp/main-site)
      become: yes
      file:
        path: /webapp/main-site
        state: directory

    - name: Install nginx server
      apt: 
        name: nginx 
        state: latest

    - name: Start nginx service
      service:
        name: nginx
        state: started
        enabled: true

    - name: Copy nginx configuration
      copy:
        src: static_site.cfg
        dest: /etc/nginx/sites-available/static_site.cfg
        mode: 755
      become: yes
    
    - name: Create symlink to activate the site.
      file:
        src: /etc/nginx/sites-available/static_site.cfg
        dest: /etc/nginx/sites-enabled/default
        state: link
      become: yes

    - name: Clone website from github
      git:
        repo: 'https://github.com/ginigangadharan/vagrant-aws-iaas-demo-site.git'
        dest: /webapp/main-site

    - name: restart nginx to load configuratioins
      service:
        name: nginx
        state: restarted
      become: yes

    - name: Install ufw (firewall)
      apt:
       name: ufw
       state: latest

    - name: Start Firewall service
      service:
        name: ufw
        state: started
        enabled: true

    - name: Setup ufw and enable for reboot
      ufw:
        state: enabled 
        policy: deny

    - name: Enable ssh and http ports
      ufw:
        rule: allow
        port: "{{ item }}"
        proto: tcp
      with_items:
        - 22
        - 80

    # Lockdown ssh access
    - name: Disallow password authentication
      lineinfile: 
        dest: /etc/ssh/sshd_config
        regexp: "^PasswordAuthentication"
        line: "PasswordAuthentication no"
        state: present
      notify: restart ssh

    - name: Disallow root SSH access
      lineinfile:
        dest: /etc/ssh/sshd_config
        regexp: "^PermitRootLogin"
        line: "PermitRootLogin no"
        state: present
      notify: restart ssh

    - name: Collect Public Hostname/Url to access
      uri: 
        url: http://169.254.169.254/latest/meta-data/public-hostname
        dest: /tmp/abc
        return_content: yes
      register: aws_meta
      notify: show public url
    
    - name: Verify website access
      uri:
        url: "http://{{ aws_meta.content }}"
        status_code: 200
      
  handlers:
    - name: restart ssh
      service:
        name: sshd
        state: restarted

   # Show Public Hostname/Url to access website
    - name: show public url
      debug:
        msg: "Your website can be accessed using url : {{ aws_meta.content }}"
